runApp()
runApp()
runApp()
data = getGEO("GDS158")
data
data = getGEO("GDS15")
data = getGEO("GDS858")
data = getGEO("GDS585")
data = getGEO("GDS58")
data = getGEO("GDS58")
data = getGEO("GDS585")
data
data = getGEO("GDS58")
runApp()
runApp()
runApp()
data = getGEO("gds858")
View(data)
data["gpl"]
data[,"gpl"]
data["gpl",]
data[header]
data["header"]
data.class(data)
data = getGEO("gds87")
data.class(data)
data = getGEO("gds878")
data.class(data)
data = getGEO("gds878")
data.class(data)
data = getGEO("gds898")
data.class(data)
data = getGEO("gds898")
data.class(data)
runApp()
runApp()
data = getGeo("dgs898")
data = getGEO("dgs898")
data = getGEO("dgs989")
data = getGEO("gds898")
data = getGEO("dgs989")
data = getGEO("gds898")
runApp()
for(i in 1:3) {
if(i == 1)
gdsAcc <- try(getGEO('GDS450',destdir="."))
cat(i, "\n")
}
data = getGEO("gds898")
data = try(getGEO("gds898"))
data
class(data)
isClass(data)
data = try(getGEO("gds898"))
data = try(getGEO("gds858"))
class(data)
data = try(getGEO("gds898"))
class(data)
isClass(data)
data = try(getGEO("gds858"))
isClass(data)
runApp()
data = try(getGEO("gds847"))
class(data)
isClass(data)
getGEO("gds847")
clear
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "laravel",
host = "localhost",
username = "root",
password = "root")
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "laravel",
host = "localhost",
username = "root",
password = "root")
rs <- dbSendQuery(conn, "SELECT * FROM peliculas LIMIT 5;")
dbFetch(rs)
dbClearResult(rs)
dbGetQuery(conn, "SELECT * FROM peliculas LIMIT 5;")
rs <- dbSendQuery(conn, "SELECT * FROM users")
rs <- dbSendQuery(conn, "SELECT * FROM users")
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "cellfiles",
host = "localhost",
username = "root",
password = "root")
rs <- dbSendQuery(conn, "SELECT * FROM users")
dbFetch(rs)
dbClearResult(rs)
dbGetQuery(conn, "SELECT * FROM peliculas LIMIT 5;")
dbGetQuery(conn, "SELECT * FROM users")
data
source('E:/M12/M12_Project/CellProject/DDBB.R', echo=TRUE)
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
users,
paste(c("name","password","rol","email"), collapse = ", "),
paste(c("prueba","prueba1","researcher","prueba@gmail.com"), collapse = ", ")
)
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
"users",
paste(c("name","password","rol","email"), collapse = ", "),
paste(c("prueba","prueba1","researcher","prueba@gmail.com"), collapse = ", ")
)
dbGetQuery(conn,
"INSERT INTO %s (%s) VALUES ('%s')",
"users",
paste(c("name","password","rol","email"), collapse = ", "),
paste(c("prueba","prueba1","researcher","prueba@gmail.com"), collapse = ", ")
)
dbGetQuery(conn,
"INSERT INTO %s (%s) VALUES ('%s')",
"users",
paste(c("name","password","rol","email")),
paste(c("prueba","prueba1","researcher","prueba@gmail.com"))
)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "cellfiles",
host = "localhost",
username = "root",
password = "root")
dbGetQuery(conn,
"INSERT INTO %s (%s) VALUES ('%s')",
"users",
paste(c("name","password","rol","email")),
paste(c("prueba","prueba1","researcher","prueba@gmail.com"))
)
dbGetQuery(conn,
"INSERT INTO users (name, password ,rol ,email)
VALUES (prueba, prueba1, researcher, prueba@gmail.com)")
dbGetQuery(conn,
"INSERT INTO users (name, password ,rol ,email)
VALUES (prueba, prueba1, researcher, 'prueba@gmail.com')")
dbGetQuery(conn,
"INSERT INTO users (name, password ,rol ,email)
VALUES ('prueba', 'prueba1', 'researcher', 'prueba@gmail.com')")
columns = c("name", "password" ,"rol" ,"email")
values = c('prueba', 'prueba1', 'researcher', 'prueba@gmail.com')
dbGetQuery(conn,
"INSERT INTO %s (%s)
VALUES ('%s')",
users, columns, values)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "cellfiles",
host = "localhost",
username = "root",
password = "root")
dbGetQuery(conn,
"INSERT INTO %s (%s)
VALUES ('%s')",
users,
paste(c("name", "password" ,"rol" ,"email"), collapse = ", "),
paste(c('prueba', 'prueba1', 'researcher', 'prueba@gmail.com'), collapse = "', ")
)
columns = c("name", "password" ,"rol" ,"email")
values = c('prueba', 'prueba1', 'researcher', 'prueba@gmail.com')
dbGetQuery(conn,
"INSERT INTO %s (%s)
VALUES ('%s')",
users, columns, values)
library(pool)
library(dplyr)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "laravel",
host = "localhost",
username = "root",
password = "root"
)
# get the first 5 rows:
df_pelis = my_db %>% tbl("peliculas") %>% head
class(df_pelis)
df_pelis
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "cellfiles",
host = "localhost",
username = "root",
password = "root")
rs <- dbSendQuery(conn, "SELECT * FROM users")
dbFetch(rs)
dbClearResult(rs)
dbGetQuery(conn, "SELECT * FROM users")
dbGetQuery(conn, "SELECT * FROM users where name = andres")
dbGetQuery(conn, "SELECT * FROM users where name = 'andres'")
username = andres
dbGetQuery(conn, "SELECT * FROM users where name = 'username")
username = "andres"
dbGetQuery(conn, "SELECT * FROM users where name = 'username")
dbGetQuery(conn, "SELECT * FROM users where name = 'username' ")
username = "andres"
dbGetQuery(conn, "SELECT * FROM users where name = 'username' ")
dbGetQuery(conn, "SELECT * FROM users where name = 'username'")
query
query = sprintf("SELECT * FROM users where name = 'username'", username)
username = "andres"
query = sprintf("SELECT * FROM users where name = 'username'", username)
dbGetQuery(conn, query)
query = sprintf("SELECT * FROM users where name = %s", username)
dbGetQuery(conn, query)
query = sprintf("SELECT * FROM users where name = ('%s')", username)
dbGetQuery(conn, query)
username = "andres"
password = "Tenesaca0"
query = sprintf("SELECT * FROM users where name = ('%s') and password = ('%s')",
username, password)
dbGetQuery(conn, query)
password = "Tenesaca"
query = sprintf("SELECT * FROM users where name = ('%s') and password = ('%s')",
username, password)
dbGetQuery(conn, query)
password = "Tenesaca0"
query = sprintf("SELECT * FROM users where name = ('%s') and password = ('%s')",
username, password)
dbGetQuery(conn, query)
username = "andres"
password = "Tenesaca0"
query = sprintf("SELECT * FROM users where name = ('%s') and password = ('%s')",
username, password)
user = dbGetQuery(conn, query)
class(user)
user
user
user$name
user$password
shinyUI(
fluidPage(
tagList(
tags$head(
tags$link(rel="stylesheet", type="text/css",href="style.css")
)
),
div(class = "login",
uiOutput("uiLogin"),
textOutput("pass"),
tags$head(tags$style("#pass{color: red;"))
),
fluidRow(
column(3,
div(class = "span1",
uiOutput("obs")
)
),
column(8,
div(class = "logininfo",
uiOutput("userPanel")
),
hr(),
div(class = "DataTable",
uiOutput('dataTable')
)
)
)
)
)
PASSWORD <- data.frame(
Brukernavn = c("ray","gil"),
Passord = c("0000","1234")
)
output$uiLogin <- renderUI({
if (USER$Logged == FALSE) {
wellPanel(
textInput("userName", "User Name:"),
passwordInput("passwd", "Pass word:"),
br(),
actionButton("Login", "Log in")
)
}
})
output$pass <- renderText({
if (USER$Logged == FALSE) {
USER$pass
}
})
# Login info during session ----
output$userPanel <- renderUI({
if (USER$Logged == TRUE) {
fluidRow(
column(2,
"User: ", USER$name
),
column(1, actionLink("logout", "Logout"))
)
}
})
# control login
observeEvent(input$Login , {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(PASSWORD$Brukernavn == Username)
Id.password <- which(PASSWORD$Passord    == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
USER$name <- Username
}
} else {
USER$pass <- "User name or password failed!"
}
})
# control logout
observeEvent(input$logout , {
USER$Logged <- FALSE
USER$pass <- ""
})
library(shiny)
shinyServer(function(input, output, session) {
USER <- reactiveValues(Logged = FALSE , session = session$user)
source("www/Login.R",  local = TRUE)
getDat <- eventReactive(input$search,{
withProgress(
message = 'Calculation in progress',
detail = 'get iris data', value=0 , {
setSpecies <- isolate(input$selectSpecies)
incProgress(0.5)
if (!is.null(setSpecies)) {
Dat <- iris[which(iris$Species %in% setSpecies),]
} else {
Dat <- NULL
}
setProgress(1)
})
return(Dat)
})
output$obs <- renderUI({
if (USER$Logged == TRUE) {
list(
selectizeInput(
'selectSpecies', 'Select iris Species', choices = as.character(unique(iris$Species)), multiple = TRUE
),
actionButton('search', 'Search')
)
}
})
output$dataTable <- renderUI({
if (USER$Logged == TRUE) {
dataTableOutput('table')
}
})
output$table <- renderDataTable(
getDat(),
options = list(
pageLength = 100,
lengthMenu = c(50,100,200,500)
)
)
})
#### Log in module ###
PASSWORD <- data.frame(
Brukernavn = c("ray","gil"),
Passord = c("0000","1234")
)
output$uiLogin <- renderUI({
if (USER$Logged == FALSE) {
wellPanel(
textInput("userName", "User Name:"),
passwordInput("passwd", "Pass word:"),
br(),
actionButton("Login", "Log in")
)
}
})
output$pass <- renderText({
if (USER$Logged == FALSE) {
USER$pass
}
})
# Login info during session ----
output$userPanel <- renderUI({
if (USER$Logged == TRUE) {
fluidRow(
column(2,
"User: ", USER$name
),
column(1, actionLink("logout", "Logout"))
)
}
})
# control login
observeEvent(input$Login , {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(PASSWORD$Brukernavn == Username)
Id.password <- which(PASSWORD$Passord    == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
USER$name <- Username
}
} else {
USER$pass <- "User name or password failed!"
}
})
# control logout
observeEvent(input$logout , {
USER$Logged <- FALSE
USER$pass <- ""
})
# NOT RUN {
## Only run this example in interactive R sessions
if (interactive()) {
header <- dashboardHeader()
sidebar <- dashboardSidebar(
sidebarUserPanel("User Name",
subtitle = a(href = "#", icon("circle", class = "text-success"), "Online"),
# Image file should be in www/ subdir
image = "userimage.png"
),
sidebarSearchForm(label = "Enter a number", "searchText", "searchButton"),
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets", badgeLabel = "new",
badgeColor = "green"),
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
)
)
body <- dashboardBody(
tabItems(
tabItem("dashboard",
div(p("Dashboard tab content"))
),
tabItem("widgets",
"Widgets tab content"
),
tabItem("subitem1",
"Sub-item 1 tab content"
),
tabItem("subitem2",
"Sub-item 2 tab content"
)
)
)
shinyApp(
ui = dashboardPage(header, sidebar, body),
server = function(input, output) { }
)
}
runApp()
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "cellfiles",
host = "localhost",
username = "root",
password = "root")
username = "andres"
password = "Tenesaca0"
runApp()
shiny::runApp()
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "cellfiles",
host = "localhost",
username = "root",
password = "root")
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "cellfiles",
host = "localhost",
username = "root",
password = "root")
runApp()
query = sprintf("SELECT * FROM users where name = ('%s') and password = ('%s')",
input$username, input$password)
query = sprintf("SELECT * FROM users where name = ('%s') and password = ('%s')",
"input", "input")
user = dbGetQuery(conn, query)
print(user)
user
length()
length(user)
user$name
user$name == ""
user$name == 0
user$name === 0
user$name == 0
user$name
user$name == T
class(user$name)
user$name == "0"
user
is.logical(user)
is.logical(user$name)
row(user)
col(user)
user == 0
user$id == 0
user$id == F
user$id == T
user[,1]
user[1,]
user$name == NA
user$id == 0
user$id == T
user$id == NA
is.logical(user$name)
