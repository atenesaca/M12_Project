),
box(
title ="", solidHeader = T, background = "black", collapsible = T,
fileInput("celFile", "Upload file", accept = ".zip"),
actionButton("upload", "Upload file")
)
),
fluidRow(
box( id="check1",
title = "Select phenoData inputs: ", solidHeader = T, background = "light-blue", collapsible = T,
checkboxGroupInput("stage", "Chooose cancer stage: ")
)
)
),
conditionalPanel(
condition= "input.sidebar == 'plot'",
plotOutput("plot") %>% withSpinner(),
plotOutput("plot2") %>% withSpinner()
)
)
)
install.packages("shinyjs")
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
gds <- getGEO("gds847", destdir=".")
e <- GDS2eSet(e, do.log2=TRUE)
e <- GDS2eSet(gds, do.log2=TRUE)
head(e)
pData(e)
groups <- pData(e)[,2]
exprs(e)
colnames(pData(e))
colnames(pData(e))[,2:3]
colnames(pData(e))[,2]
colnames(pData(e))[2]
colnames(pData(e))[2:3]
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
colnames(pData(e))[2:3]
a<- "agent"
colnames(pData(e))[a]
colnames(pData(e))["agent"]
colnames(pData(e))[2:3]
colnames(pData(e))[agent]
colnames(pData(e))
pData(e)[,a]
pData(e)[,"agent"]
e %>% pData() %>% select(a)
library(tidyverse)
e %>% pData() %>% select(a)
r %>% pData() %>% select(a)
r<- pData(e)
r %>% pData() %>% select(a)
r %>% select(a)
shiny::runApp('Escritorio/m12/M12_Project/CellProject')
r %>% select(a)
r %>% filter(a)
r
class(r)
r %>% select(sample)
r
r[,1]
r[,2]
library(tidyverse)
r %>% select(sample)
r %>% dplyr::select(sample)
r %>% dplyr::select(a)
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
r %>% dplyr::select(a)
r %>% dplyr::select(a) %>% as.levels()
r %>% dplyr::select(a) %>% levels()
r %>% dplyr::select(a) %>% names()
r  %>% levels(factor(dplyr::select(a)))
r %>% dplyr::select(a) %>% levels(factor())
r %>% dplyr::group_by(a)
?quo
colnames(pData(e))[2:3]
quo(a)
r %>% dplyr::group_by(a)
r %>% dplyr::group_by(quo(a))
p <- pData(e)
p
p <- p %>% select(a)
p <- p %>% dplyr::select(a)
p
p <- factor(p)
p
p <- levels(factor(p))
p
p <- p %>% dplyr::select(a)
p <- pData(e)
p <- p %>% dplyr::select(a)
p
p <- as.factor(p)
p
p <- pData(e)
p <- p %>% dplyr::select(a)
levels(p)
as.factor(p)
p <- p %>% dplyr::filter(a)
p <- pData(e)
p <- p %>% dplyr::filter(a)
r %>% dplyr::group_by(agent)
levels(r$agent)
r %>% dplyr::group_by(a)
head(e)
groups <- pData(e)[,2]
groups
groups <- levels(pData(e)[,2])
groups
groups <- levels(pData(e)[,a])
groups
runApp('Escritorio/m12/M12_Project/CellProject')
gds <- getGEO("gds858", destdir=".")
gds <- getGEO("gds858", destdir=".")
e <- GDS2eSet(gds, do.log2=TRUE)
pheno <- pData(e)
pheno
a <- "genotype/variation"
groups <- levels(pData(e)[,a])
groups
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
groups <- levels(factor(pData(e)[,a]))
groups
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
pheno
pheno[,a]
levels(pheno[,a])
class(levels(pheno[,a]))
as.factor(pheno[,a])
class(as.factor(pheno[,a]))
as.factor(pheno[,a])
class(as.factorlevels((pheno[,a])))
levels(pheno[,a])
factor(levels(pheno[,a]))
class(factor(levels(pheno[,a])))
runApp('Escritorio/m12/M12_Project/CellProject')
factor(levels(pheno[,a]))
class(factor(levels(pheno[,a])))
pheno[,a]
pheno
g<- melt(exprs(e), varnames = c( "probe", "sample"))
g
head(g)
head(pheno)
pheno[,a]
levels(pheno[,a])
levels(pheno[,a])[1]
levels(pheno[,a])
class(levels(pheno[,a]))
factor(levels(pheno[,a]))
factor(levels(pheno[,a]))[1]
factor(pheno[,a])
class(factor(pheno[,a]))
as.factor(levels(pheno[,a]))
as.factor(pheno[,a])
e
head(g)
pheno[,a]
hacerGrupo(e)
hacerGrupo <- function(dt) {
pheno <- pData(dt)
a <- "genotype/variation"
repuesta <- pheno[,a]
}
hacerGrupo(e)
hacerGrupo <- function(dt) {
pheno <- pData(dt)
a <- "genotype/variation"
repuesta <- pheno[,a]
respuesta
}
hacerGrupo(e)
hacerGrupo <- function(dt) {
pheno <- pData(dt)
a <- "genotype/variation"
respuesta <- pheno[,a]
respuesta
}
hacerGrupo(e)
hacerGrupo(e)["GSM14498"]
respuesta["GSM14498"]
respuesta <- pheno[,a]
respuesta["GSM14498"]
shiny::runApp('Escritorio/pruebaPro')
runApp('Escritorio/pruebaPro')
runApp('Escritorio/pruebaPro')
runApp('Escritorio/pruebaPro')
runApp('Escritorio/pruebaPro')
runApp('Escritorio/pruebaPro')
runApp('Escritorio/pruebaPro')
runApp('Escritorio/pruebaPro')
runApp('Escritorio/pruebaPro')
runApp('Escritorio/pruebaPro')
install.packages("hflights")
runApp('cosa shiny')
observeEvent(input$login,{
uid_t<-isolate(input$uid)
pwd_t<-isolate(input$password)
if(input$uid=="")
{
showModal(modalDialog(
title = "Invalid",
"Please Fill Username"
))
}
else if(input$password=="")
{
showModal(modalDialog(
title = "Invalid",
"Please Fill Password"
))
}
else if(input$uid=="" &&input$password=="" )
{
showModal(modalDialog(
title = "Invalid",
"Please Fill Username & Password"
))
}
else if(ui_t %in% login_table$username==TRUE|pwd_t %in% login_table$password==TRUE)
{
temp_login<-login_table[(login_table$username == uid_t ), ]
if(temp_login$username==input$uid && temp_login$password==input$password)
{
library(tcltk)
tkmessageBox(title = "XyBot",message = "Login Sucessful", icon = "info", type = "ok")
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
updateTabsetPanel(session, "tabs",selected ="data_upload")
user_logged<-1
shinyjs::disable("login_box")
}
else
{
tkmessageBox(title = "XyBot",message = "Wrong Credentials", icon = "info", type = "ok")
}
}
else
{
showModal(modalDialog(
title = "Wrong",
"Please Check your Credentials "
))
}
})
geo <- getGEO("gds858", destdir=".")
e <- GDS2eSet(geo, do.log2=TRUE)
groups <- pData(e)[,2]
y <- exprs(e)
design <- model.matrix(~factor(groups))
fit <- lmFit(y, design)
ebayes <- eBayes(fit)
t<- topTable(ebayes, coef = 2, n=1000)
volcanoplot(ebayes, coef=2, highlight=5, xlim=c(-15,15))
library(limma)
fit <- lmFit(y, design)
ebayes <- eBayes(fit)
t<- topTable(ebayes, coef = 2, n=1000)
volcanoplot(ebayes, coef=2, highlight=5, xlim=c(-15,15))
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
library(EnhancedVolcano)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
ebayes
t
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
library(EnhancedVolcano)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
## enhanced
t<- topTable(ebayes, coef = 2, adjust = "fdr", n=1000)
t<- topTable(ebayes, coef = 2, n=1000)
# Cluster
clust.euclid.average <- hclust(dist(t(exprs(matriz))), method="average")
library(limma)
library(GEOquery)
library(Biobase)
geo<- getGEO("GDS858", destdir=".")
matriz<- GDS2eSet(geo, do.log2=FALSE)
image(exprs(matriz[,1]))
image(exprs(matriz[,2]))
image(exprs(matriz[,3]))
# Cluster
clust.euclid.average <- hclust(dist(t(exprs(matriz))), method="average")
plot(clust.euclid.average, hang=-1)
shiny::runApp('Escritorio/m12/M12_Project/CellProject')
# Cluster
clust.euclid.average <- hclust(dist(t(exprs(matriz))), method="maximum")
# Cluster
clust.euclid.average <- hclust(dist(t(exprs(matriz)), method="maximum"))
plot(clust.euclid.average, hang=-1)
# Cluster
clust.euclid.average <- hclust(dist(t(exprs(matriz)), method="average"))
# Cluster
clust.euclid.average <- hclust(dist(t(exprs(matriz)), method="average"))
# Cluster
clust.euclid.average <- hclust(dist(t(exprs(matriz)), method="maximum"))
plot(clust.euclid.average, hang=-1)
# Cluster
clust.euclid.average <- hclust(dist(t(exprs(matriz)), method="euclidean"))
plot(clust.euclid.average, hang=-1)
ggdendogram(clust.euclid.average)
ggdendrogram(clust.euclid.average)
library(ggdendro)
install.packages(ggdendro)
install.packages("ggdendro")
library(ggdendro)
ggdendrogram(clust.euclid.average)
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dark())
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE)
clust.euclid.average
clust.euclid.average@labels
clust.euclid.average$labels
clust.euclid.average$order
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE, color_branches())
?color_branches()
dend <- clust.euclid.average %>% as.dendrogram %>% set("branches_k_color", k=3) %>% set("branches_lwd", 1.2)
library(tidyverse)
dend <- clust.euclid.average %>% as.dendrogram %>% set("branches_k_color", k=3) %>% set("branches_lwd", 1.2)
dend <- clust.euclid.average %>% as.dendrogram
gd1 <- as.ggdend(gd1)
ggplot(clust.euclid.average)+scale_y_reverse(expand=c(0.2,2))+ coord_polar(theta="x")
install.packages('dendextend')
install.packages("dendextend")
library(dendextend)
ggd1 <- as.ggdend(clust.euclid.average)
ggd1 <- as.ggdend(as.dendrogram(clust.euclid.average))
ggplot(ggd1)+scale_y_reverse(expand=c(0.2,2))+ coord_polar(theta="x")
library(tidyverse)
ggplot(ggd1)+scale_y_reverse(expand=c(0.2,2))+ coord_polar(theta="x")
ggplot(ggd1)+scale_y_reverse()+ coord_polar(theta="x")
geo<- getGEO("GDS858", destdir=".")
matriz<- GDS2eSet(geo, do.log2=FALSE)
# Cluster
clust.euclid.average <- hclust(dist(t(exprs(matriz)), method="euclidean"))
plot(clust.euclid.average, hang=-1)
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE, ?color_branches())
library(ggdendro)
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE, ?color_branches())
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE, color_branches())
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE)
?ggdendrogram
?ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE, labels=FALSE)
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE, labels=FALSE)
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE, labels=TRUE)
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE) + theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
ggdendrogram(clust.euclid.average, rotate = TRUE, theme_dendro = FALSE) +
theme(axis.title= element_blank())
shiny::runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
install.packages("shinyWidgets")
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
y<- exprs(matriz)
g<- y[23,]
g
y
g<- y["200027_at",]
g
runApp('Escritorio/m12/M12_Project/CellProject')
runApp('Escritorio/m12/M12_Project/CellProject')
library(annotate)
library(annotate)
?GDS2eSet
?getGEO
geo<- getGEO("GDS858", AnnotGPL = FALSE)
matriz<- GDS2eSet(geo, do.log2=FALSE)
image(exprs(matriz[,3]))
matriz
matriz@annotation
geo<- getGEO("GDS857", AnnotGPL = FALSE)
matriz<- GDS2eSet(geo, do.log2=FALSE)
matriz@annotation
geo<- getGEO("GDS857", AnnotGPL = TRUE)
matriz<- GDS2eSet(geo, do.log2=FALSE)
matriz@annotation
matriz$protocol
pData(matriz)
Meta(matriz)
META(matriz)
Meta(matriz)
Meta(matriz)
matriz@experimentData
fData(matriz)
head(fData(matriz))
fData(matriz)$Gene symbol
fData(matriz)[1,]
fData(matriz)[1,]
fData(matriz)[1,3]
geo<- getGEO("GDS858", AnnotGPL = FALSE)
matriz<- GDS2eSet(geo, do.log2=FALSE)
fData(matriz)[1,3]
fData(matriz)
head(fData(matriz))
geo<- getGEO("GDS859", AnnotGPL = FALSE)
matriz<- GDS2eSet(geo, do.log2=FALSE)
head(fData(matriz))
head(pData(matriz))
head(fData(matriz[,3]))
fData(matriz)[,3]
fData(matriz)[,2]
fData(matriz)[898,2]
fData(matriz)[968,2]
fData(matriz)[968,]
fData(matriz)[968,2]
fData(matriz)[967,2]
fData(matriz)[967,3]
fData(matriz)[,3]
fData(matriz)$sampleNames
fData(matriz)$probeNames
matriz@featureData
fData(matriz)
matriz@featureData
varMetadata(matriz)
varLabels(matriz)
featureNames(matriz)
fData(matriz)
rownames(fData(matriz))
fData(matriz)
geneNames(matriz)
sampleNames(matriz)
geo<- getGEO("GDS858", AnnotGPL = FALSE)
matriz<- GDS2eSet(geo, do.log2=FALSE)
sampleNames(matriz)
y <- exprs(matriz)
facLevel<- pData(y)[,2]
facLevel<- pData(matriz)[,2]
facLevel
y
g<- y %>%
gather("sample", "value")
g<- as.dataframe(y) %>%
gather("sample", "value")
g<- as.data.frame(y) %>%
gather("sample", "value")
g
as.data.frame(y)
g<- melt(y, varnames = c( "probe", "sample"))
g
g<- as.datafray %>%
gather("probe","sample","value")
g<- as.data.frame(y) %>%
gather("probe","sample","value")
g<- melt(y, varnames = c( "probe", "sample"))
geneSymbol<- fData(matriz)[,3]
geneSymbol
g$geneSymbol <- geneSymbol[match(g$sample, sample)]
facLevel
class(facLevel)
g<- melt(y, varnames = c( "probe", "sample"))
g$facLevel <- facLevel[match(g$sample, sample)]
sample <- sampleNames(y)
geo<- getGEO("GDS858", AnnotGPL = FALSE)
matriz<- GDS2eSet(geo, do.log2=FALSE)
sample <- sampleNames(matriz)
y <- exprs(matriz)
facLevel<- pData(matriz)[,2]
g<- melt(y, varnames = c( "probe", "sample"))
g$facLevel <- facLevel[match(g$sample, sample)]
g
gen <- fData(matriz)[,3]
gen
class(gen)
gen <- factor(fData(matriz)[,3])
gen
gen <- fData(matriz)[,3]
g$gen <- gen[match(g$sample, sample)]
g
sample <- rownames(matriz)
sample
probenames <- rownames(matriz)
g$gen <- gen[match(g$probe, probenames)]
g
runApp('Escritorio/m12/M12_Project/CellProject')
install.packages("BiocManager")
install.packages("BiocManager")
shiny::runApp('Escritorio/m12/M12_Project/CellProject')
shiny::runApp()
install.packages(c("DT", "RMySQL"))
runApp()
install.packages("shinyWidgets")
runApp()
install.packages("RMySQL")
