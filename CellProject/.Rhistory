fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
colnames(design) <- vect
gru <- m
df <- lmFit(y,design)
geo <- getGEO("gds858")
shiny::runApp()
geo <- getGEO("gds858")
matriz <- GDS2eSet(geo, do.log2=TRUE)
groups <- pData(matriz)[,2]
y <- exprs(matriz)
design <- model.matrix(~ groups)
design
?lmFit()
fit <- lmFit(y, design)
t<- topTable(ebayes, coef = 2, n=1000)
ebayes <- ?eBayes(fit)
?eBayes
ebayes <- eBayes(fit)
t<- topTable(ebayes, coef = 2, n=1000)
volcanoplot(ebayes, coef=2, highlight=5)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
runApp()
geneId <- rownames(t)
geneId
geneID <- rownames(t)
geneList <- factor(as.integer(geneID))
names(geneList) <- geneID
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList, nodeSize = 10)
BiocManager::install("topGO")
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList, nodeSize = 10)
library(topGo)
library(topGO)
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList, nodeSize = 10)
geneList
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList, nodeSize = 10)
geneID <- rownames(t)
geneID
geneList
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneID, nodeSize = 10)
geneList <- factor(geneID)
geneList
geneList <- factor(as.integer(t))
t
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
######## PANEL PLOTS  ######
conditionalPanel(
# if sidebar id is equal with "plot" show page
condition= "input.sidebar == 'plot'",
# Create a panel of tab in body to show plots
tabsetPanel(type="tabs",
tabPanel("Quality Control",
fluidRow(
column(6,box(title="",plotOutput("plot.raw1") , height = 600))
),
column(6,plotOutput("plot.rma1", height = 600)
)
),
fluidRow(
br(),
column(width=8, offset=2, align="center",
selectInput("select.dendro", "Choose method for dendrogram: ",
choices = c("euclidean", "maximum", "manhattan",
"canberra", "binary", "minkowski"))),
column(6, plotOutput("dendro.raw")),
column(6, plotOutput("dendro.rma"))
),
fluidRow(
br(),
# reactive function which show MA plot
column(width=8, offset=2, align="center",
plotOutput("plot.MA")
)
)
),
# Create tab and add a title
tabPanel("Gene Expression",
# reactive function which show a heat map plot
fluidRow(
column(width = 9,
d3heatmapOutput("plot.heatMap", height = "80vh")
),
column(width=3,
sliderInput("sli_heatmap", label = "Please select the
amount of genes to display in heatmap", min = 15,
max = 300, value = 30)
)
),
# reactive function which show a plot of genes
fluidRow(
br(),
column(9, plotlyOutput("plot.gene1",  height = "80vh")),
column(3, searchInput("searchGene", label="Search gene to evaluate",
btnReset = icon("remove"), btnSearch = icon("search")),
radioButtons("radioGene", "Select Raw or Normalized data:",
choices=c("Raw", "Normalized")))
),
# reactive function which show a volcano plot
fluidRow(
br(),
br(),
plotOutput("plot.volcano", height = 800)
)
)
)
######## PANEL PLOTS  ######
conditionalPanel(
# if sidebar id is equal with "plot" show page
condition= "input.sidebar == 'plot'",
# Create a panel of tab in body to show plots
tabsetPanel(type="tabs",
tabPanel("Quality Control",
fluidRow(
column(6,box(title="",plotOutput("plot.raw1"), height = 600)
),
column(6,plotOutput("plot.rma1", height = 600)
)
),
fluidRow(
br(),
column(width=8, offset=2, align="center",
selectInput("select.dendro", "Choose method for dendrogram: ",
choices = c("euclidean", "maximum", "manhattan",
"canberra", "binary", "minkowski"))),
column(6, plotOutput("dendro.raw")),
column(6, plotOutput("dendro.rma"))
),
fluidRow(
br(),
# reactive function which show MA plot
column(width=8, offset=2, align="center",
plotOutput("plot.MA")
)
)
),
# Create tab and add a title
tabPanel("Gene Expression",
# reactive function which show a heat map plot
fluidRow(
column(width = 9,
d3heatmapOutput("plot.heatMap", height = "80vh")
),
column(width=3,
sliderInput("sli_heatmap", label = "Please select the
amount of genes to display in heatmap", min = 15,
max = 300, value = 30)
)
),
# reactive function which show a plot of genes
fluidRow(
br(),
column(9, plotlyOutput("plot.gene1",  height = "80vh")),
column(3, searchInput("searchGene", label="Search gene to evaluate",
btnReset = icon("remove"), btnSearch = icon("search")),
radioButtons("radioGene", "Select Raw or Normalized data:",
choices=c("Raw", "Normalized")))
),
# reactive function which show a volcano plot
fluidRow(
br(),
br(),
plotOutput("plot.volcano", height = 800)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/M12_Project/CellProject/Views/plot.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?getGEO
geo <- getGEO("gds858")
matriz <- GDS2eSet(geo, do.log2=TRUE)
groups <- pData(matriz)[,2]
matriz <- GDS2eSet(geo, do.log2=TRUE)
problems(...)
problems(matriz <- GDS2eSet(geo, do.log2=TRUE))
groups <- pData(matriz)[,2]
y <- exprs(matriz)
library(stringr)
## newer ##
num <- 1
gro <- as.character(groups)
gro <- str_replace_all(gro, " ", "_")
vec <- unique(gro)
cont <- length(vec)
h <- ""
v <- vector()
m <- vector()
for (i in 1:cont)
{
v[i] <- vec[i]
}
for (i in 1:cont)
{
for (j in cont:i)
{
if(v[i] != v[j])
{
h <- paste(v[i],v[j], sep = "-")
m[num] <- h
num <- num+1
}
}
}
m
vect <- unique(groups)
fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
colnames(design) <- vect
gru <- m
df <- lmFit(y,design)
contrast <- makeContrasts(contrasts = gru,levels=design)
fac
fac<- str_replace_all(fac, " ", "_")
fac
geo <- getGEO("gds858")
matriz <- GDS2eSet(geo, do.log2=TRUE)
groups <- pData(matriz)[,2]
## newer ##
num <- 1
gro <- as.character(groups)
gro <- str_replace_all(gro, " ", "_")
vec <- unique(gro)
cont <- length(vec)
h <- ""
v <- vector()
m <- vector()
for (i in 1:cont){
v[i] <- vec[i]
}
for (i in 1:cont){
for (j in cont:i){
if(v[i] != v[j]){
h <- paste(v[i],v[j], sep = "-")
m[num] <- h
num <- num+1
}
}
}
m
groups<- str_replace_all(groups, " ", "_")
vect <- unique(groups)
fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
colnames(design) <- vect
gru <- m
df <- lmFit(y,design)
### older ###
y <- exprs(matriz)
df <- lmFit(y,design)
contrast <- makeContrasts(contrasts = gru,levels=design)
help(make.names)
groups<- make.names(groups)
groups
groups <- pData(matriz)[,2]
groups<- make.names(groups)
groups
vect <- unique(groups)
fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
colnames(design) <- vect
gru <- m
df <- lmFit(y,design)
contrast <- makeContrasts(contrasts = gru,levels=design)
gru
groups <- pData(matriz)[,2]
## newer ##
num <- 1
gro <- as.character(groups)
gro <- str_replace_all(gro, " ", "_")
vec <- unique(gro)
cont <- length(vec)
h <- ""
v <- vector()
m <- vector()
## newer ##
num <- 1
gro <- as.character(groups)
vec <- unique(gro)
cont <- length(vec)
h <- ""
v <- vector()
m <- vector()
for (i in 1:cont){
v[i] <- vec[i]
}
for (i in 1:cont){
for (j in cont:i){
if(v[i] != v[j]){
h <- paste(v[i],v[j], sep = "-")
m[num] <- h
num <- num+1
}
}
}
m
m<-make.names(m)
m
groups<- make.names(groups)
vect <- unique(groups)
fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
colnames(design) <- vect
gru <- m
df <- lmFit(y,design)
contrast <- makeContrasts(contrasts = gru,levels=design)
design
groups <- pData(matriz)[,2]
## newer ##
num <- 1
gro <- as.character(groups)
gro
groups <- pData(matriz)[,2]
groups<- make.names(groups)
## newer ##
num <- 1
gro <- as.character(groups)
gro
vec <- unique(gro)
vec
cont <- length(vec)
cont
h <- ""
v <- vector()
m <- vector()
for (i in 1:cont){
v[i] <- vec[i]
}
for (i in 1:cont){
for (j in cont:i){
if(v[i] != v[j]){
h <- paste(v[i],v[j], sep = "-")
m[num] <- h
num <- num+1
}
}
}
m
vect <- unique(groups)
vect
fac <- factor(groups,levels=vect)
fac
design <- model.matrix(~ 0 + fac)
design
colnames(design) <- vect
design
gru <- m
df <- lmFit(y,design)
df
contrast <- makeContrasts(contrasts = gru,levels=design)
contrast
datafitcon <-  contrasts.fit(df,contrast)
dfeb <-  eBayes(datafitcon)
dfeb
ebayes <-  eBayes(datafitcon)
t<- topTable(ebayes, coef = 2, n=1000)
volcanoplot(ebayes, coef=2, highlight=5)
## enhanced
t<- topTable(ebayes, coef = 2, adjust = "fdr", n=1000)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
contrast <- function(x){
num <- 1
gro <- as.character(x)
vec <- unique(gro)
cont <- length(vec)
h <- ""
v <- vector()
m <- vector()
for (i in 1:cont){
v[i] <- vec[i]
}
for (i in 1:cont){
for (j in cont:i){
if(v[i] != v[j]){
h <- paste(v[i],v[j], sep = "-")
m[num] <- h
num <- num+1
}
}
}
m
}
groups <- pData(matriz)[,2]
gru <- contrast(groups)
gru
groups<- make.names(groups)
groups
runApp()
dim(y)
dim(y)[1]
y
dim(y)[1]
length(rownames(y))
## enhanced
t<- topTable(ebayes, coef = 1, adjust = "fdr", n=1000)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
## enhanced
t<- topTable(ebayes, coef = 3, adjust = "fdr", n=1000)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
## enhanced
t<- topTable(ebayes, coef = 4, adjust = "fdr", n=1000)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
ebayes
str(ebayes)
?topTable
## enhanced
t<- topTable(ebayes, coef = 4, adjust = "fdr", n=length(rownames(y)))
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
## enhanced
t<- topTable(ebayes, coef = 5, adjust = "fdr", n=length(rownames(y)))
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
## enhanced
t<- topTable(ebayes, coef = 1, adjust = "fdr", n=length(rownames(y)))
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
design
datafitcon
## enhanced
t<- topTable(ebayes, coef = 7, adjust = "fdr", n=length(rownames(y)))
## enhanced
t<- topTable(ebayes, coef = 6, adjust = "fdr", n=length(rownames(y)))
ebayes$coefficients
class(ebayes$coefficients)
colnames(ebayes$coefficients)
## enhanced
x<-2
t<- topTable(ebayes, coef = x, adjust = "fdr", n=length(rownames(y)))
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
runApp()
runApp()
runApp()
?topTable
colnames(ebayes$coefficients)
## enhanced
x<-"control-motile"
t<- topTable(ebayes, coef = x, adjust = "fdr", n=length(rownames(y)))
?EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
runApp()
runApp()
?topTable
runApp()
runApp()
colnames(ebayes$coefficients)
runApp()
runApp()
EnhancedVolcano(t,
lab = rownames(t),
title = x,
x = 'logFC',
y = 'P.Value')
EnhancedVolcano(t,
lab = rownames(t),
title = paste0("Fold changes for this contrast group: ", x),
x = 'logFC',
y = 'P.Value')
runApp()
runApp()
