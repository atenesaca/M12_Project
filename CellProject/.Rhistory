levels(groups)
f <- factor(groups,levels = levels(groups))
f
design <- model.matrix(~ 0+groups)
design
colnames(design) <- levels(groups)
design
fit <- lmFit(y, design)
ebayes <- eBayes(fit)
t<- topTable(ebayes, coef = 2, n=1000)
volcanoplot(ebayes, coef=2, highlight=5)
## enhanced
t<- topTable(ebayes, coef = 2, adjust = "fdr", n=1000)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
ebayes
matriz <- GDS2eSet(geo, do.log2=TRUE)
geo <- getGEO("gds858")
matriz <- GDS2eSet(geo, do.log2=TRUE)
groups <- pData(matriz)[,2]
y <- exprs(matriz)
design <- model.matrix(~ 0 + groups)
fit <- lmFit(y, design)
ebayes <- eBayes(fit)
t<- topTable(ebayes, coef = 2, n=1000)
volcanoplot(ebayes, coef=2, highlight=5)
## enhanced
t<- topTable(ebayes, coef = 2, adjust = "fdr", n=1000)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
res<-decideTests(ebayes,
method="separate",
adjust.method="fdr",
p.value=0.01)
sum.res.rows<-apply(abs(res),1,sum)
res.selected<-res[sum.res.rows!=0,]
vennDiagram (ebayes, main="Genes in common", cex=0.9, circle.col
= c('red', 'blue', 'green'), include="up")
vennDiagram (res.selected[1:3,], main="Genes in common", cex=0.9, circle.col
= c('red', 'blue', 'green'), include="up")
vennDiagram (res.selected[,1:3], main="Genes in common", cex=0.9, circle.col
= c('red', 'blue', 'green'), include="up")
vennDiagram (res.selected[,1:4], main="Genes in common", cex=0.9, circle.col
= c('red', 'blue', 'green'), include="up")
vennDiagram (res.selected[,2:4], main="Genes in common", cex=0.9, circle.col
= c('red', 'blue', 'green'), include="up")
vennDiagram (res.selected[,1:3], main="Genes in common", cex=0.9, circle.col
= c('red', 'blue', 'green'), include="up")
volcanoplot(ebayes, coef=1, highlight=5)
volcanoplot(ebayes, coef=2, highlight=5)
volcanoplot(ebayes, coef=3, highlight=5)
volcanoplot(ebayes, coef=4, highlight=5)
?topTable
t<- topTable(ebayes, coef = 2, n=1000)
t
design <- model.matrix(~ groups)
fit <- lmFit(y, design)
ebayes <- eBayes(fit)
volcanoplot(ebayes, coef=4, highlight=5)
design
fit
design
design <- model.matrix(~0+ groups)
design
y
groups
design
?design
groups <- pData(matriz)[,3]
design <- model.matrix(~0+ groups)
design
design$groups
design@groups
design(,"assign")
con.matrix <- makeContrasts(
controlvstreatment = (control-treatment)
levels = design
)
con.matrix <- makeContrasts(
controlvstreatment = (control-treatment)
levels = design
)
con.matrix <- makeContrasts(
controlvstreatment = (control-treatment),
levels = design
)
con.matrix <- makeContrasts(
controlvstreatment = (contrasts-treatment),
levels = design
)
con.matrix <- makeContrasts(
controlvstreatment = (assign-contrasts),
levels = design
)
?topTable
ebayes
design <- model.matrix(~0+ groups)
fit <- lmFit(y, design)
ebayes <- eBayes(fit)
volcanoplot(ebayes, coef=1, highlight=5)
volcanoplot(ebayes, coef=2, highlight=5)
## enhanced
t<- topTable(ebayes, coef = 1, adjust = "fdr", n=1000)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
## enhanced
t<- topTable(ebayes, coef = 2, adjust = "fdr", n=1000)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
## enhanced
t<- topTable(ebayes, coef = 3, adjust = "fdr", n=1000)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
con.matrix <- makeContrasts(
groups, levels = design
)
con.matrix <- makeContrasts(
levels(groups), levels = design
)
groups <- pData(matriz)[,2]
y <- exprs(matriz)
design <- model.matrix(~0+ groups)
con.matrix <- makeContrasts(
levels(groups), levels = design
)
groups <- pData(matriz)[,3]
y <- exprs(matriz)
design <- model.matrix(~0+ groups)
con.matrix <- makeContrasts(
levels(groups), levels = design
)
geo <- getGEO("gds858")
matriz <- GDS2eSet(geo, do.log2=TRUE)
groups <- pData(matriz)[,3]
y <- exprs(matriz)
design <- model.matrix(~0+ groups)
groups <- pData(matriz)[,3]
y <- exprs(matriz)
design <- model.matrix(~0+ groups)
con.matrix <- makeContrasts(
levels(groups), levels = design
)
con.matrix <- makeContrasts(
factor(groups), levels = design
)
con.matrix <- makeContrasts(
groups[,1:3], levels = design
)
con.matrix <- makeContrasts(
contrasts=x, levels = design
)
con.matrix <- makeContrasts(
x, levels = design
)
matriz <- GDS2eSet(geo, do.log2=TRUE)
groups <- pData(matriz)[,2]
y <- exprs(matriz)
vect <- unique(groups)
fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
colnames(design) <- vect
df <- lmFit(y,design)
df
vennDiagram (ebayes, main="Genes in common", cex=0.9, circle.col
= c('red', 'blue', 'green'), include="up")
um <- 1
control <- FALSE
gro <- as.character(groups)
vec <- unique(gro)
cont <- length(vec)
h <- ""
v <- vector()
m <- vector()
for (i in 1:cont)
{
v[i] <- vec[i]
}
for (i in 1:cont)
{
for (j in cont:i)
{
if(v[i] != v[j])
{
h <- paste(v[i],v[j], sep = "-")
m[num] <- h
num <- num+1
}
}
}
num <- 1
control <- FALSE
gro <- as.character(groups)
vec <- unique(gro)
cont <- length(vec)
h <- ""
v <- vector()
m <- vector()
for (i in 1:cont)
{
v[i] <- vec[i]
}
for (i in 1:cont)
{
for (j in cont:i)
{
if(v[i] != v[j])
{
h <- paste(v[i],v[j], sep = "-")
m[num] <- h
num <- num+1
}
}
}
m
vect <- unique(groups)
fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
colnames(design) <- vect
gru <- gr_sel()
gru <- m
df <- lmFit(y,design)
contrast <- makeContrasts(contrasts = gru,levels=design)
groups <- pData(matriz)[,3]
num <- 1
control <- FALSE
gro <- as.character(groups)
vec <- unique(gro)
cont <- length(vec)
h <- ""
v <- vector()
m <- vector()
for (i in 1:cont)
{
v[i] <- vec[i]
}
for (i in 1:cont)
{
for (j in cont:i)
{
if(v[i] != v[j])
{
h <- paste(v[i],v[j], sep = "-")
m[num] <- h
num <- num+1
}
}
}
m
vect <- unique(groups)
fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
colnames(design) <- vect
gru <- m
df <- lmFit(y,design)
contrast <- makeContrasts(contrasts = gru,levels=design)
datafitcon = contrasts.fit(df,contrast)
dfeb = eBayes(datafitcon)
t<- topTable(dfeb, coef = 2, adjust = "fdr", n=1000)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
runApp()
m
groups <- pData(matriz)[,2]
num <- 1
control <- FALSE
gro <- as.character(groups)
vec <- unique(gro)
cont <- length(vec)
h <- ""
v <- vector()
m <- vector()
for (i in 1:cont)
{
v[i] <- vec[i]
}
for (i in 1:cont)
{
for (j in cont:i)
{
if(v[i] != v[j])
{
h <- paste(v[i],v[j], sep = "-")
m[num] <- h
num <- num+1
}
}
}
m
m<-str_replace_all(m, " ", "_")
library(tidyverse)
install.packages("tidyverse")
m<-str_replace_all(m, " ", "_")
library(tidyverse)
m<-str_replace_all(m, " ", "_")
m
vect <- unique(groups)
fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
colnames(design) <- vect
gru <- m
df <- lmFit(y,design)
contrast <- makeContrasts(contrasts = gru,levels=design)
vect
fac
vect <- unique(groups) %>% str_replace_all(m, " ", "_")
vect <- unique(groups) %>% str_replace_all(" ", "_")
vect
fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
colnames(design) <- vect
gru <- m
df <- lmFit(y,design)
geo <- getGEO("gds858")
shiny::runApp()
geo <- getGEO("gds858")
matriz <- GDS2eSet(geo, do.log2=TRUE)
groups <- pData(matriz)[,2]
y <- exprs(matriz)
design <- model.matrix(~ groups)
design
?lmFit()
fit <- lmFit(y, design)
t<- topTable(ebayes, coef = 2, n=1000)
ebayes <- ?eBayes(fit)
?eBayes
ebayes <- eBayes(fit)
t<- topTable(ebayes, coef = 2, n=1000)
volcanoplot(ebayes, coef=2, highlight=5)
EnhancedVolcano(t,
lab = rownames(t),
x = 'logFC',
y = 'P.Value')
runApp()
geneId <- rownames(t)
geneId
geneID <- rownames(t)
geneList <- factor(as.integer(geneID))
names(geneList) <- geneID
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList, nodeSize = 10)
BiocManager::install("topGO")
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList, nodeSize = 10)
library(topGo)
library(topGO)
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList, nodeSize = 10)
geneList
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList, nodeSize = 10)
geneID <- rownames(t)
geneID
geneList
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneID, nodeSize = 10)
geneList <- factor(geneID)
geneList
geneList <- factor(as.integer(t))
t
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
######## PANEL PLOTS  ######
conditionalPanel(
# if sidebar id is equal with "plot" show page
condition= "input.sidebar == 'plot'",
# Create a panel of tab in body to show plots
tabsetPanel(type="tabs",
tabPanel("Quality Control",
fluidRow(
column(6,box(title="",plotOutput("plot.raw1") , height = 600))
),
column(6,plotOutput("plot.rma1", height = 600)
)
),
fluidRow(
br(),
column(width=8, offset=2, align="center",
selectInput("select.dendro", "Choose method for dendrogram: ",
choices = c("euclidean", "maximum", "manhattan",
"canberra", "binary", "minkowski"))),
column(6, plotOutput("dendro.raw")),
column(6, plotOutput("dendro.rma"))
),
fluidRow(
br(),
# reactive function which show MA plot
column(width=8, offset=2, align="center",
plotOutput("plot.MA")
)
)
),
# Create tab and add a title
tabPanel("Gene Expression",
# reactive function which show a heat map plot
fluidRow(
column(width = 9,
d3heatmapOutput("plot.heatMap", height = "80vh")
),
column(width=3,
sliderInput("sli_heatmap", label = "Please select the
amount of genes to display in heatmap", min = 15,
max = 300, value = 30)
)
),
# reactive function which show a plot of genes
fluidRow(
br(),
column(9, plotlyOutput("plot.gene1",  height = "80vh")),
column(3, searchInput("searchGene", label="Search gene to evaluate",
btnReset = icon("remove"), btnSearch = icon("search")),
radioButtons("radioGene", "Select Raw or Normalized data:",
choices=c("Raw", "Normalized")))
),
# reactive function which show a volcano plot
fluidRow(
br(),
br(),
plotOutput("plot.volcano", height = 800)
)
)
)
######## PANEL PLOTS  ######
conditionalPanel(
# if sidebar id is equal with "plot" show page
condition= "input.sidebar == 'plot'",
# Create a panel of tab in body to show plots
tabsetPanel(type="tabs",
tabPanel("Quality Control",
fluidRow(
column(6,box(title="",plotOutput("plot.raw1"), height = 600)
),
column(6,plotOutput("plot.rma1", height = 600)
)
),
fluidRow(
br(),
column(width=8, offset=2, align="center",
selectInput("select.dendro", "Choose method for dendrogram: ",
choices = c("euclidean", "maximum", "manhattan",
"canberra", "binary", "minkowski"))),
column(6, plotOutput("dendro.raw")),
column(6, plotOutput("dendro.rma"))
),
fluidRow(
br(),
# reactive function which show MA plot
column(width=8, offset=2, align="center",
plotOutput("plot.MA")
)
)
),
# Create tab and add a title
tabPanel("Gene Expression",
# reactive function which show a heat map plot
fluidRow(
column(width = 9,
d3heatmapOutput("plot.heatMap", height = "80vh")
),
column(width=3,
sliderInput("sli_heatmap", label = "Please select the
amount of genes to display in heatmap", min = 15,
max = 300, value = 30)
)
),
# reactive function which show a plot of genes
fluidRow(
br(),
column(9, plotlyOutput("plot.gene1",  height = "80vh")),
column(3, searchInput("searchGene", label="Search gene to evaluate",
btnReset = icon("remove"), btnSearch = icon("search")),
radioButtons("radioGene", "Select Raw or Normalized data:",
choices=c("Raw", "Normalized")))
),
# reactive function which show a volcano plot
fluidRow(
br(),
br(),
plotOutput("plot.volcano", height = 800)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/M12_Project/CellProject/Views/plot.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
