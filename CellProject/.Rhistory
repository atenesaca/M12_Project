library(shiny)
library(dashboard)
install.packages(c("shiny", "dashboard"))
library(shiny)
library(dashboard)
runApp()
runApp()
runApp()
install.packages("shinydashboard")
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Cell Files"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Cell Files"),
dashboardSidebar(
disable = TRUE,
numericInput("num","Numero",0,10,0.1)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
runApp()
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library(shinydashboard)
ui = source("./view/ui.R")
server = source("./controller/controller.R")
shinyApp(ui, server)
library(shinydashboard)
ui = source("./view/ui.R")
server = source("./controller/controller.R")
shinyApp(ui, server)
runApp()
navbarPage("App Title",
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table")
)
runApp()
runApp()
runApp()
runApp()
navbarPage("Navbar!",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
radioButtons("plotType", "Plot type",
c("Scatter"="p", "Line"="l")
)
),
mainPanel(
plotOutput("plot")
)
)
),
tabPanel("Summary",
verbatimTextOutput("summary")
),
navbarMenu("More",
tabPanel("Table",
DT::dataTableOutput("table")
),
tabPanel("About",
fluidRow(
column(6,
includeMarkdown("about.md")
),
column(3,
img(class="img-polaroid",
src=paste0("http://upload.wikimedia.org/",
"wikipedia/commons/9/92/",
"1919_Ford_Model_T_Highboy_Coupe.jpg")),
tags$small(
"Source: Photographed at the Bay State Antique ",
"Automobile Club's July 10, 2005 show at the ",
"Endicott Estate in Dedham, MA by ",
a(href="http://commons.wikimedia.org/wiki/User:Sfoskett",
"User:Sfoskett")
)
)
)
)
)
)
function(input, output, session) {
output$plot <- renderPlot({
plot(cars, type=input$plotType)
})
output$summary <- renderPrint({
summary(cars)
})
output$table <- DT::renderDataTable({
DT::datatable(cars)
})
}
summary(cars)
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboard")
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- dashboardPage(
dashboardHeader(
title = "Cell Files"
),
dashboardSidebar(
collapsed = TRUE,
sidebarMenu(id="sidebar",
menuItem("Home", tabName = "home", icon = icon("home")),
menuItem("Plot", tabName =  "plot", icon = icon("chart-bar"))
),
conditionalPanel(
condition = "input.sidebar == 'plot'",
selectInput("period", "Period:",
choices = list("Years" = 1, "Months" = 2))
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(
title = "Cell Files"
),
dashboardSidebar(
collapsed = TRUE,
sidebarMenu(id="sidebar",
menuItem("Home", tabName = "home", icon = icon("home")),
menuItem("Plot", tabName =  "plot", icon = icon("fas fa chart-bar"))
),
conditionalPanel(
condition = "input.sidebar == 'plot'",
selectInput("period", "Period:",
choices = list("Years" = 1, "Months" = 2))
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
shinyApp(ui = ui, server = server)
a <- xmlParse(FileName)
library(shiny)
parse_xml <-function(FileName) {
a <- xmlParse(FileName)
xmlToDataFrame(a, stringsAsFactors = FALSE) %>%
fill(Description, Min, Max, id, StartDateTime,
EndDateTime, .direction = "up") %>%
na.omit()
}
ui <- fluidPage(
column(width = 4,
fileInput("upload", "Upload", accept = ".zip")),
column(width = 4,
br(),
actionButton("process", "Process uploaded data"))
)
server <- function(input, output) {
observeEvent(input$process, {
files <- unzip(input$upload, list = TRUE)
Data <- ldply(unz(input$upload, files$Name[2:length(files$Name)]), parse_xml)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
header <- dashboardHeader()
header <- dashboardHeader()
sidebar <- dashboardSidebar(
sidebarUserPanel(
"User Name",
subtitle = a(href = "#", icon("circle", class = "text-success"), "Online"),
# Image file should be in www/ subdir
image = "userimage.png"
),
sidebarSearchForm(label = "Enter a number", "searchText", "searchButton"),
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
menuItem(
"Dashboard",
tabName = "dashboard",
icon = icon("dashboard")
),
menuItem(
"Widgets",
icon = icon("th"),
tabName = "widgets",
badgeLabel = "new",
badgeColor = "green"
),
menuItem(
"Charts",
icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
)
)
body <- dashboardBody(tabItems(
tabItem("dashboard",
div(p(
"Dashboard tab content"
))),
tabItem("widgets",
"Widgets tab content"),
tabItem("subitem1",
"Sub-item 1 tab content"),
tabItem("subitem2",
"Sub-item 2 tab content")
))
shinyApp(
ui = dashboardPage(header, sidebar, body),
server = function(input, output) {
}
)
runApp()
runApp()
## app.R ##
library(shinydashboard)
library(dplyr)
library(lubridate)
# Load libraries and functions needed to create SQLite databases.
library(RSQLite)
library(RSQLite.extfuns)
install.packages("RSQLite")
# Load libraries and functions needed to create SQLite databases.
library(RSQLite)
library(RSQLite.extfuns)
install.packages("RSQLite.extfuns")
install.packages("/media/tarda/SAN DISK 16/M12/Cell/RSQLite.extfuns_0.0.1.tar.gz", repos = NULL, type = "source")
library(RSQLite.extfuns)
setwd("/media/tarda/SAN DISK 16/M12/Cell")
saveSQLite <- function(data, name){
path <- dplyr:::db_location(filename=paste0(name, ".sqlite"))
if (!file.exists(path)) {
message("Caching db at ", path)
src <- src_sqlite(path, create = TRUE)
copy_to(src, data, name, temporary = FALSE)
} else {
src <- src_sqlite(path)
}
return (src)
}
shinyUI(
fluidPage(
# Setup the page title
tagList(tags$head(tags$title("Airline Delays")), h1(textOutput("title"))),
sidebarLayout(
sidebarPanel(
uiOutput("userPanel"),
hr(),
sliderInput("days", "Prior days to include:", 1, 30, 7, 1),
hr(),
helpText("The graph on the right shows a boxplot of the departure " ,
"delays for the airline(s) your username is allowed to view.")
),
mainPanel(
plotOutput("box")
)
)
)
)
library(shiny)
library(dplyr)
library(lubridate)
# Load libraries and functions needed to create SQLite databases.
library(RSQLite)
library(RSQLite.extfuns)
saveSQLite <- function(data, name){
path <- dplyr:::db_location(filename=paste0(name, ".sqlite"))
if (!file.exists(path)) {
message("Caching db at ", path)
src <- src_sqlite(path, create = TRUE)
copy_to(src, data, name, temporary = FALSE)
} else {
src <- src_sqlite(path)
}
return (src)
}
# Load and upload flights data
library(hflights)
install.packages("hflights")
# get shiny, DBI, dplyr and dbplyr from CRAN
install.packages("shiny")
install.packages("DBI")
install.packages("dplyr")
install.packages("dbplyr")
# get pool from GitHub, since it's not yet on CRAN
devtools::install_github("rstudio/pool")
install.packages("devtools")
# get pool from GitHub, since it's not yet on CRAN
devtools::install_github("rstudio/pool")
# get pool from GitHub, since it's not yet on CRAN
devtools::install_github("rstudio/pool")
library("devtools")
library(devtools)
install.packages("devtools")
install.packages("libssl-dev")
